# JMH version: 1.32
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11-LTS
# VM invoker: /Library/Java/JavaVirtualMachines/applejdk-11.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/russellspitzer/repos/ipr/iceberg-master/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint
# Warmup: <none>
# Measurement: 5 iterations, single-shot each
# Timeout: 1000 hr per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesFourColumns

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.086 s/op
Iteration   2: 10.337 s/op
Iteration   3: 10.606 s/op
Iteration   4: 10.897 s/op
Iteration   5: 10.607 s/op


Result "org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesFourColumns":
  N = 5
  mean =     10.706 ±(99.9%) 1.117 s/op

  Histogram, s/op:
    [10.300, 10.350) = 1 
    [10.350, 10.400) = 0 
    [10.400, 10.450) = 0 
    [10.450, 10.500) = 0 
    [10.500, 10.550) = 0 
    [10.550, 10.600) = 0 
    [10.600, 10.650) = 2 
    [10.650, 10.700) = 0 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 1 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.337 s/op
     p(50.0000) =     10.607 s/op
     p(90.0000) =     11.086 s/op
     p(95.0000) =     11.086 s/op
     p(99.0000) =     11.086 s/op
     p(99.9000) =     11.086 s/op
     p(99.9900) =     11.086 s/op
     p(99.9990) =     11.086 s/op
     p(99.9999) =     11.086 s/op
    p(100.0000) =     11.086 s/op


# JMH version: 1.32
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11-LTS
# VM invoker: /Library/Java/JavaVirtualMachines/applejdk-11.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/russellspitzer/repos/ipr/iceberg-master/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint
# Warmup: <none>
# Measurement: 5 iterations, single-shot each
# Timeout: 1000 hr per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesFourColumns8ByteOutput

# Run progress: 25.00% complete, ETA 00:02:54
# Fork: 1 of 1
Iteration   1: 2.521 s/op
Iteration   2: 2.750 s/op
Iteration   3: 2.999 s/op
Iteration   4: 2.972 s/op
Iteration   5: 3.028 s/op


Result "org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesFourColumns8ByteOutput":
  N = 5
  mean =      2.854 ±(99.9%) 0.832 s/op

  Histogram, s/op:
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 2 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.521 s/op
     p(50.0000) =      2.972 s/op
     p(90.0000) =      3.028 s/op
     p(95.0000) =      3.028 s/op
     p(99.0000) =      3.028 s/op
     p(99.9000) =      3.028 s/op
     p(99.9900) =      3.028 s/op
     p(99.9990) =      3.028 s/op
     p(99.9999) =      3.028 s/op
    p(100.0000) =      3.028 s/op


# JMH version: 1.32
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11-LTS
# VM invoker: /Library/Java/JavaVirtualMachines/applejdk-11.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/russellspitzer/repos/ipr/iceberg-master/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint
# Warmup: <none>
# Measurement: 5 iterations, single-shot each
# Timeout: 1000 hr per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesThreeColumns

# Run progress: 50.00% complete, ETA 00:01:15
# Fork: 1 of 1
Iteration   1: 7.440 s/op
Iteration   2: 7.625 s/op
Iteration   3: 8.216 s/op
Iteration   4: 8.314 s/op
Iteration   5: 8.203 s/op


Result "org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesThreeColumns":
  N = 5
  mean =      7.960 ±(99.9%) 1.532 s/op

  Histogram, s/op:
    [7.400, 7.500) = 1 
    [7.500, 7.600) = 0 
    [7.600, 7.700) = 1 
    [7.700, 7.800) = 0 
    [7.800, 7.900) = 0 
    [7.900, 8.000) = 0 
    [8.000, 8.100) = 0 
    [8.100, 8.200) = 0 
    [8.200, 8.300) = 2 

  Percentiles, s/op:
      p(0.0000) =      7.440 s/op
     p(50.0000) =      8.203 s/op
     p(90.0000) =      8.314 s/op
     p(95.0000) =      8.314 s/op
     p(99.0000) =      8.314 s/op
     p(99.9000) =      8.314 s/op
     p(99.9900) =      8.314 s/op
     p(99.9990) =      8.314 s/op
     p(99.9999) =      8.314 s/op
    p(100.0000) =      8.314 s/op


# JMH version: 1.32
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11-LTS
# VM invoker: /Library/Java/JavaVirtualMachines/applejdk-11.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/russellspitzer/repos/ipr/iceberg-master/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint
# Warmup: <none>
# Measurement: 5 iterations, single-shot each
# Timeout: 1000 hr per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesTwoColumns

# Run progress: 75.00% complete, ETA 00:00:39
# Fork: 1 of 1
Iteration   1: 5.327 s/op
Iteration   2: 5.212 s/op
Iteration   3: 5.963 s/op
Iteration   4: 5.758 s/op
Iteration   5: 5.827 s/op


Result "org.apache.iceberg.util.ZOrderByteUtilsBenchmark.interleaveValuesTwoColumns":
  N = 5
  mean =      5.618 ±(99.9%) 1.265 s/op

  Histogram, s/op:
    [5.200, 5.250) = 1 
    [5.250, 5.300) = 0 
    [5.300, 5.350) = 1 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 1 
    [5.800, 5.850) = 1 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.212 s/op
     p(50.0000) =      5.758 s/op
     p(90.0000) =      5.963 s/op
     p(95.0000) =      5.963 s/op
     p(99.0000) =      5.963 s/op
     p(99.9000) =      5.963 s/op
     p(99.9900) =      5.963 s/op
     p(99.9990) =      5.963 s/op
     p(99.9999) =      5.963 s/op
    p(100.0000) =      5.963 s/op


# Run complete. Total time: 00:02:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt   Score   Error  Units
ZOrderByteUtilsBenchmark.interleaveValuesFourColumns               ss    5  10.706 ± 1.117   s/op
ZOrderByteUtilsBenchmark.interleaveValuesFourColumns8ByteOutput    ss    5   2.854 ± 0.832   s/op
ZOrderByteUtilsBenchmark.interleaveValuesThreeColumns              ss    5   7.960 ± 1.532   s/op
ZOrderByteUtilsBenchmark.interleaveValuesTwoColumns                ss    5   5.618 ± 1.265   s/op

Benchmark result is saved to /Users/russellspitzer/repos/ipr/iceberg-master/core/build/results/jmh/results.txt
